
//  public static int searchBitonicArray(int[] arr, int target) {
//    int peakIndex = findPeak(arr);
//    int ascendingResult = binarySearch(arr, target, 0, peakIndex, true);
//    if (ascendingResult != -1) {
//      return ascendingResult;
//    }
//    int descendingResult = binarySearch(arr, target, peakIndex, arr.length - 1, false);
//    return descendingResult;
//  }
//
//  public static int binarySearch(int[] arr, int target, int left, int right, boolean isAscending) {
//    while (left <= right) {
//      int mid = left + (right - left) / 2;
//      if (arr[mid] == target) {
//        return mid;
//      } else if (arr[mid] < target) {
//        left = isAscending ? mid + 1 : left;
//        right = isAscending ? right : mid - 1;
//      } else {
//        left = isAscending ? left : mid + 1;
//        right = isAscending ? mid - 1 : right;
//      }
//    }
//    return -1;
//  }
//
//  public static int findPeak(int[] arr) {
//    int left = 0;
//    int right = arr.length - 1;
//    while (left < right) {
//      int mid = left + (right - left) / 2;
//      if (arr[mid] < arr[mid + 1]) {
//        left = mid + 1;
//      } else {
//        right = mid;
//      }
//    }
//    return left;
//  }
//
//  public static void main(String[] args) {
//    int[] bitonicArr = {1, 3, 5, 9, 12, 10, 7, 6, 4, 2};
//    int target = 6;
//    int result = searchBitonicArray(bitonicArr, target);
//    if (result != -1) {
//      System.out.println("Element " + target + " found at index " + result + ".");
//    } else {
//      System.out.println("Element " + target + " not found in the array.");
//    }
//  }